// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DataNode.proto

package lab

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type File struct {
	Log                  []byte   `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

type Book struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parts                int32    `protobuf:"varint,2,opt,name=parts,proto3" json:"parts,omitempty"`
	Chunks               []*Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{1}
}

func (m *Book) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Book.Unmarshal(m, b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Book.Marshal(b, m, deterministic)
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return xxx_messageInfo_Book.Size(m)
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *Book) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type Chunk struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{3}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Proposal struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Chunk                *Chunk   `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4c9d8f36887fb, []int{4}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Proposal) GetChunk() *Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "lab.File")
	proto.RegisterType((*Book)(nil), "lab.Book")
	proto.RegisterType((*Chunk)(nil), "lab.Chunk")
	proto.RegisterType((*Message)(nil), "lab.Message")
	proto.RegisterType((*Proposal)(nil), "lab.Proposal")
}

func init() {
	proto.RegisterFile("DataNode.proto", fileDescriptor_2cc4c9d8f36887fb)
}

var fileDescriptor_2cc4c9d8f36887fb = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x4f, 0xea, 0x40,
	0x10, 0xa5, 0x94, 0x72, 0x61, 0xe8, 0x25, 0x64, 0xc2, 0x43, 0x73, 0x93, 0x9b, 0x90, 0x7d, 0xea,
	0xbd, 0x31, 0x85, 0xd4, 0x07, 0x5f, 0x7c, 0x52, 0xa2, 0xf1, 0x41, 0x62, 0x2a, 0xfe, 0x80, 0x45,
	0x56, 0x6c, 0xa8, 0xdd, 0xa6, 0xbb, 0x44, 0xfd, 0x39, 0xfa, 0x4b, 0xdd, 0x0e, 0x1f, 0x69, 0xc1,
	0x10, 0xdf, 0xce, 0xcc, 0x99, 0x39, 0x73, 0xf6, 0xb4, 0xd0, 0x1d, 0x73, 0xcd, 0x27, 0x72, 0x2e,
	0x82, 0x2c, 0x97, 0x5a, 0xa2, 0x9d, 0xf0, 0x19, 0xf3, 0xa0, 0x71, 0x15, 0x27, 0x02, 0x7b, 0x60,
	0x27, 0x72, 0xe1, 0x59, 0x03, 0xcb, 0x77, 0xa3, 0x02, 0xb2, 0x29, 0x34, 0x2e, 0xa4, 0x5c, 0x22,
	0x42, 0x23, 0xe5, 0x2f, 0x82, 0xa8, 0x76, 0x44, 0x18, 0xfb, 0xe0, 0x64, 0x3c, 0xd7, 0xca, 0xab,
	0x9b, 0xa6, 0x13, 0xad, 0x0b, 0x64, 0xd0, 0x7c, 0x7c, 0x5e, 0xa5, 0x4b, 0xe5, 0xd9, 0x03, 0xdb,
	0xef, 0x84, 0x10, 0x98, 0x0b, 0xc1, 0x65, 0xd1, 0x8a, 0x36, 0x0c, 0x1b, 0x82, 0x43, 0x8d, 0x6f,
	0x65, 0x4d, 0x6f, 0x6e, 0x3c, 0x92, 0xaa, 0x1b, 0x11, 0x66, 0x7f, 0xe1, 0xd7, 0xad, 0x50, 0x8a,
	0x2f, 0x88, 0xd6, 0xe2, 0x4d, 0x6f, 0x57, 0x0a, 0xcc, 0xce, 0xa1, 0x75, 0x97, 0xcb, 0x4c, 0x2a,
	0x9e, 0x60, 0x17, 0xea, 0x71, 0xb6, 0x61, 0x0d, 0xc2, 0x01, 0x38, 0x74, 0x95, 0xf4, 0xaa, 0x76,
	0xd6, 0x44, 0xf8, 0x59, 0x87, 0xd6, 0x36, 0x15, 0xfc, 0x07, 0xee, 0xbd, 0x48, 0xe7, 0xc5, 0xa3,
	0x6f, 0xd2, 0x27, 0x89, 0x6d, 0x9a, 0x2f, 0xca, 0x3f, 0x2e, 0xc1, 0x8d, 0x0f, 0x56, 0xc3, 0x11,
	0xf4, 0xc6, 0xb1, 0xd2, 0x79, 0x3c, 0x5b, 0xe9, 0x58, 0xa6, 0xd3, 0xf7, 0x4c, 0x60, 0x65, 0xe6,
	0x60, 0xe3, 0x3f, 0xc0, 0x43, 0x96, 0x48, 0x4e, 0xf2, 0x58, 0xb2, 0xb2, 0x3f, 0xe9, 0x5b, 0x78,
	0x02, 0xee, 0x58, 0xbe, 0xa6, 0xbb, 0xe9, 0xaa, 0x72, 0x69, 0x97, 0xd5, 0x46, 0x16, 0x06, 0x25,
	0x2f, 0x82, 0xda, 0xea, 0x98, 0x3e, 0x0e, 0xd7, 0xcf, 0xdc, 0xa5, 0xf6, 0x9b, 0xf8, 0x6d, 0x79,
	0x68, 0x27, 0xfc, 0xb0, 0xa0, 0x35, 0x31, 0x9f, 0x87, 0x42, 0xf2, 0xa1, 0x73, 0x2d, 0xf4, 0x4f,
	0x32, 0x0a, 0x8f, 0xdf, 0xa9, 0x96, 0xc5, 0x21, 0xf3, 0x96, 0x33, 0xe8, 0x1b, 0x75, 0xf2, 0x5d,
	0xce, 0x77, 0x2f, 0x81, 0xfd, 0xd5, 0x91, 0x35, 0x6b, 0xd2, 0x2f, 0x7d, 0xfa, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0xc3, 0xf2, 0xe2, 0xe4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeClient interface {
	SendBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error)
	DistributionType(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNode_UploadBookClient, error)
	DownloadBook(ctx context.Context, in *Message, opts ...grpc.CallOption) (DataNode_DownloadBookClient, error)
	DistributeChunks(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Message, error)
	//Distribuido
	SendProposal(ctx context.Context, opts ...grpc.CallOption) (DataNode_SendProposalClient, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) SendBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/lab.DataNode/SendBookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) DistributionType(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/lab.DataNode/DistributionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) UploadBook(ctx context.Context, opts ...grpc.CallOption) (DataNode_UploadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[0], "/lab.DataNode/UploadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeUploadBookClient{stream}
	return x, nil
}

type DataNode_UploadBookClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type dataNodeUploadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeUploadBookClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeUploadBookClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) DownloadBook(ctx context.Context, in *Message, opts ...grpc.CallOption) (DataNode_DownloadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[1], "/lab.DataNode/DownloadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeDownloadBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNode_DownloadBookClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type dataNodeDownloadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeDownloadBookClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) DistributeChunks(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/lab.DataNode/DistributeChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) SendProposal(ctx context.Context, opts ...grpc.CallOption) (DataNode_SendProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[2], "/lab.DataNode/SendProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeSendProposalClient{stream}
	return x, nil
}

type DataNode_SendProposalClient interface {
	Send(*Proposal) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type dataNodeSendProposalClient struct {
	grpc.ClientStream
}

func (x *dataNodeSendProposalClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeSendProposalClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataNodeServer is the server API for DataNode service.
type DataNodeServer interface {
	SendBookInfo(context.Context, *Book) (*Message, error)
	DistributionType(context.Context, *Message) (*Message, error)
	UploadBook(DataNode_UploadBookServer) error
	DownloadBook(*Message, DataNode_DownloadBookServer) error
	DistributeChunks(context.Context, *Chunk) (*Message, error)
	//Distribuido
	SendProposal(DataNode_SendProposalServer) error
}

// UnimplementedDataNodeServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (*UnimplementedDataNodeServer) SendBookInfo(ctx context.Context, req *Book) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBookInfo not implemented")
}
func (*UnimplementedDataNodeServer) DistributionType(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionType not implemented")
}
func (*UnimplementedDataNodeServer) UploadBook(srv DataNode_UploadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBook not implemented")
}
func (*UnimplementedDataNodeServer) DownloadBook(req *Message, srv DataNode_DownloadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBook not implemented")
}
func (*UnimplementedDataNodeServer) DistributeChunks(ctx context.Context, req *Chunk) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeChunks not implemented")
}
func (*UnimplementedDataNodeServer) SendProposal(srv DataNode_SendProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_SendBookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).SendBookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lab.DataNode/SendBookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).SendBookInfo(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_DistributionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).DistributionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lab.DataNode/DistributionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).DistributionType(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_UploadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).UploadBook(&dataNodeUploadBookServer{stream})
}

type DataNode_UploadBookServer interface {
	SendAndClose(*Message) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataNodeUploadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeUploadBookServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeUploadBookServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNode_DownloadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServer).DownloadBook(m, &dataNodeDownloadBookServer{stream})
}

type DataNode_DownloadBookServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type dataNodeDownloadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeDownloadBookServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DataNode_DistributeChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).DistributeChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lab.DataNode/DistributeChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).DistributeChunks(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_SendProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).SendProposal(&dataNodeSendProposalServer{stream})
}

type DataNode_SendProposalServer interface {
	SendAndClose(*Message) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type dataNodeSendProposalServer struct {
	grpc.ServerStream
}

func (x *dataNodeSendProposalServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeSendProposalServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lab.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBookInfo",
			Handler:    _DataNode_SendBookInfo_Handler,
		},
		{
			MethodName: "DistributionType",
			Handler:    _DataNode_DistributionType_Handler,
		},
		{
			MethodName: "DistributeChunks",
			Handler:    _DataNode_DistributeChunks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBook",
			Handler:       _DataNode_UploadBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadBook",
			Handler:       _DataNode_DownloadBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendProposal",
			Handler:       _DataNode_SendProposal_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "DataNode.proto",
}

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameNodeClient interface {
	GetBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error)
	//Centralizado
	SendProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_SendProposalClient, error)
	GetChunkDistribution(ctx context.Context, in *Message, opts ...grpc.CallOption) (NameNode_GetChunkDistributionClient, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) GetBookInfo(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/lab.NameNode/GetBookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) SendProposal(ctx context.Context, opts ...grpc.CallOption) (NameNode_SendProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[0], "/lab.NameNode/SendProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeSendProposalClient{stream}
	return x, nil
}

type NameNode_SendProposalClient interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ClientStream
}

type nameNodeSendProposalClient struct {
	grpc.ClientStream
}

func (x *nameNodeSendProposalClient) Send(m *Proposal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameNodeSendProposalClient) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameNodeClient) GetChunkDistribution(ctx context.Context, in *Message, opts ...grpc.CallOption) (NameNode_GetChunkDistributionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[1], "/lab.NameNode/GetChunkDistribution", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeGetChunkDistributionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NameNode_GetChunkDistributionClient interface {
	Recv() (*Proposal, error)
	grpc.ClientStream
}

type nameNodeGetChunkDistributionClient struct {
	grpc.ClientStream
}

func (x *nameNodeGetChunkDistributionClient) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameNodeServer is the server API for NameNode service.
type NameNodeServer interface {
	GetBookInfo(context.Context, *Book) (*Message, error)
	//Centralizado
	SendProposal(NameNode_SendProposalServer) error
	GetChunkDistribution(*Message, NameNode_GetChunkDistributionServer) error
}

// UnimplementedNameNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (*UnimplementedNameNodeServer) GetBookInfo(ctx context.Context, req *Book) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookInfo not implemented")
}
func (*UnimplementedNameNodeServer) SendProposal(srv NameNode_SendProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (*UnimplementedNameNodeServer) GetChunkDistribution(req *Message, srv NameNode_GetChunkDistributionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChunkDistribution not implemented")
}

func RegisterNameNodeServer(s *grpc.Server, srv NameNodeServer) {
	s.RegisterService(&_NameNode_serviceDesc, srv)
}

func _NameNode_GetBookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).GetBookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lab.NameNode/GetBookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).GetBookInfo(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_SendProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameNodeServer).SendProposal(&nameNodeSendProposalServer{stream})
}

type NameNode_SendProposalServer interface {
	Send(*Proposal) error
	Recv() (*Proposal, error)
	grpc.ServerStream
}

type nameNodeSendProposalServer struct {
	grpc.ServerStream
}

func (x *nameNodeSendProposalServer) Send(m *Proposal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameNodeSendProposalServer) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NameNode_GetChunkDistribution_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NameNodeServer).GetChunkDistribution(m, &nameNodeGetChunkDistributionServer{stream})
}

type NameNode_GetChunkDistributionServer interface {
	Send(*Proposal) error
	grpc.ServerStream
}

type nameNodeGetChunkDistributionServer struct {
	grpc.ServerStream
}

func (x *nameNodeGetChunkDistributionServer) Send(m *Proposal) error {
	return x.ServerStream.SendMsg(m)
}

var _NameNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lab.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookInfo",
			Handler:    _NameNode_GetBookInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendProposal",
			Handler:       _NameNode_SendProposal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChunkDistribution",
			Handler:       _NameNode_GetChunkDistribution_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "DataNode.proto",
}
